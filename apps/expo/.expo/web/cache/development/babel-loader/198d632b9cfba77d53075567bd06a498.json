{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { createTRPCReact } from \"@trpc/react-query\";\nexport var trpc = createTRPCReact();\n\nimport Constants from \"expo-constants\";\nvar getBaseUrl = function getBaseUrl() {\n  var _Constants$manifest, _Constants$manifest$d;\n  var localhost = (_Constants$manifest = Constants.manifest) == null ? void 0 : (_Constants$manifest$d = _Constants$manifest.debuggerHost) == null ? void 0 : _Constants$manifest$d.split(\":\")[0];\n  if (!localhost) throw new Error(\"failed to get localhost, configure it manually\");\n  return \"http://\" + localhost + \":3000\";\n};\n\nimport React from \"react\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { httpBatchLink } from \"@trpc/client\";\nimport { transformer } from \"@acme/api/transformer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var TRPCProvider = function TRPCProvider(_ref) {\n  var children = _ref.children;\n  var _React$useState = React.useState(function () {\n      return new QueryClient();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    queryClient = _React$useState2[0];\n  var _React$useState3 = React.useState(function () {\n      return trpc.createClient({\n        transformer: transformer,\n        links: [httpBatchLink({\n          url: getBaseUrl() + \"/api/trpc\"\n        })]\n      });\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 1),\n    trpcClient = _React$useState4[0];\n  return _jsx(trpc.Provider, {\n    client: trpcClient,\n    queryClient: queryClient,\n    children: _jsx(QueryClientProvider, {\n      client: queryClient,\n      children: children\n    })\n  });\n};","map":{"version":3,"names":["createTRPCReact","trpc","Constants","getBaseUrl","localhost","manifest","debuggerHost","split","Error","React","QueryClient","QueryClientProvider","httpBatchLink","transformer","TRPCProvider","children","useState","queryClient","createClient","links","url","trpcClient"],"sources":["/home/admin1/meway/apps/expo/src/utils/trpc.tsx"],"sourcesContent":["import { createTRPCReact } from \"@trpc/react-query\";\nimport type { AppRouter } from \"@acme/api\";\n/**\n * A set of typesafe hooks for consuming your API.\n */\nexport const trpc = createTRPCReact<AppRouter>();\n\n/**\n * Extend this function when going to production by\n * setting the baseUrl to your production API URL.\n */\nimport Constants from \"expo-constants\";\nconst getBaseUrl = () => {\n  /**\n   * Gets the IP address of your host-machine. If it cannot automatically find it,\n   * you'll have to manually set it. NOTE: Port 3000 should work for most but confirm\n   * you don't have anything else running on it, or you'd have to change it.\n   */\n  const localhost = Constants.manifest?.debuggerHost?.split(\":\")[0];\n  if (!localhost)\n    throw new Error(\"failed to get localhost, configure it manually\");\n  return `http://${localhost}:3000`;\n};\n\n/**\n * A wrapper for your app that provides the TRPC context.\n * Use only in _app.tsx\n */\nimport React from \"react\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { httpBatchLink } from \"@trpc/client\";\nimport { transformer } from \"@acme/api/transformer\";\n\nexport const TRPCProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [queryClient] = React.useState(() => new QueryClient());\n  const [trpcClient] = React.useState(() =>\n    trpc.createClient({\n      transformer,\n      links: [\n        httpBatchLink({\n          url: `${getBaseUrl()}/api/trpc`,\n        }),\n      ],\n    })\n  );\n\n  return (\n    <trpc.Provider client={trpcClient} queryClient={queryClient}>\n      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n    </trpc.Provider>\n  );\n};\n"],"mappings":";AAAA,SAASA,eAAe,QAAQ,mBAAmB;AAKnD,OAAO,IAAMC,IAAI,GAAGD,eAAe,EAAa;;AAMhD,OAAOE,SAAS,MAAM,gBAAgB;AACtC,IAAMC,UAAU,GAAG,SAAbA,UAAU,GAAS;EAAA;EAMvB,IAAMC,SAAS,0BAAGF,SAAS,CAACG,QAAQ,8CAAlB,oBAAoBC,YAAY,qBAAhC,sBAAkCC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACjE,IAAI,CAACH,SAAS,EACZ,MAAM,IAAII,KAAK,CAAC,gDAAgD,CAAC;EACnE,mBAAiBJ,SAAS;AAC5B,CAAC;;AAMD,OAAOK,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,mBAAmB,QAAQ,uBAAuB;AACxE,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,WAAW,QAAQ,uBAAuB;AAAC;AAEpD,OAAO,IAAMC,YAAqD,GAAG,SAAxDA,YAAqD,OAE5D;EAAA,IADJC,QAAQ,QAARA,QAAQ;EAER,sBAAsBN,KAAK,CAACO,QAAQ,CAAC;MAAA,OAAM,IAAIN,WAAW,EAAE;IAAA,EAAC;IAAA;IAAtDO,WAAW;EAClB,uBAAqBR,KAAK,CAACO,QAAQ,CAAC;MAAA,OAClCf,IAAI,CAACiB,YAAY,CAAC;QAChBL,WAAW,EAAXA,WAAW;QACXM,KAAK,EAAE,CACLP,aAAa,CAAC;UACZQ,GAAG,EAAKjB,UAAU,EAAE;QACtB,CAAC,CAAC;MAEN,CAAC,CAAC;IAAA,EACH;IAAA;IATMkB,UAAU;EAWjB,OACE,KAAC,IAAI,CAAC,QAAQ;IAAC,MAAM,EAAEA,UAAW;IAAC,WAAW,EAAEJ,WAAY;IAAA,UAC1D,KAAC,mBAAmB;MAAC,MAAM,EAAEA,WAAY;MAAA,UAAEF;IAAQ;EAAuB,EAC5D;AAEpB,CAAC"},"metadata":{},"sourceType":"module"}